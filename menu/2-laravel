#!/bin/bash

export MY_SONAR_HOST
export MY_SONAR_TOKEN
export MY_DOCKER_HOST

IMAGE_NAME=''
CONTAINER_NAME=''
SONAR_KEY=''
SONAR_NAME=''
SONAR_VERSION=''


function main(){
  clear
  while : ; do
    printf "\n\n[ q:exit | *:test-all | g:test-group | f:test-filter | c:coverage | s:sonar | i:install | u:update | l:logs | m:make | h:ide-helper-model | e:exec ]\n\n"
    read -n1 -s
    case "$REPLY" in
	"i") clear; install           ;; 
	"g") clear; test_group        ;; 
	"f") clear; test_filter       ;; 
	"s") clear; sonar             ;; 
	"u") clear; update            ;; 
	"c") clear; coverage          ;; 
	"e") clear; exec              ;; 
	"m") clear; make              ;; 
	"l") clear; logs              ;; 
	"h") clear; ide_helper_model  ;; 
	"q") clear; break             ;; 
	 * ) clear; test_all          ;; 
    esac
  done
}





function test_all(){
    run_container
    docker-compose exec container vendor/bin/phpunit --no-coverage --exclude-group integration
}


function test_group(){
    run_container
    read -p "Enter @group name for tests: " group_name
    while : ; do
      clear
      docker-compose exec container vendor/bin/phpunit --no-coverage --group $group_name
      printf "\n\n[ q:exit | *:continue tests ($group_name) ]\n\n"
      read -n1 -s
      case "$REPLY" in
	"q") clear; break  ;; 
      esac
    done
}


function test_filter(){
    run_container
    read -p "Enter filter[file|class] name for tests: " filter_name
    while : ; do
      clear
      docker-compose exec container vendor/bin/phpunit --no-coverage --filter $filter_name
      printf "\n\n[ q:exit | *:continue tests ($filter_name) ]\n\n"
      read -n1 -s
      case "$REPLY" in
	"q") clear; break  ;; 
      esac
    done
}


function coverage(){
    run_container
    docker-compose exec container vendor/bin/phpunit --exclude-group integration
    start src/storage/phpunit/index.html
}

function sonar(){
    run_container
    docker-compose exec container vendor/bin/phpunit --exclude-group integration
    docker run --rm -v %cd%/src:/var/www/html/ -e HOST=${MY_SONAR_HOST} -e TOKEN=${MY_SONAR_TOKEN} jaynarol/sonar-scanner
}

function install(){
  if [ ! -d src ]; then
    set_project

    add_docker_compose
    add_gitignore
    add_nginx_conf

    docker run --rm -v %cd%/src:/var/www/html/ jaynarol/php-fpm-alpine:7.1-composer composer create-project --prefer-dist laravel/laravel .
    source src/.env
    rm -rf src/.env*
    sed -i "s@\[wait_key\]@$APP_KEY@" docker-compose.yml

    add_phpunit
    add_sonar
  else
    printf "\n\n!!! The project has been installed !!!\n\n"
  fi
}

function update(){
  if [ -d src ]; then
    docker run --rm -v %cd%/src:/var/www/html/ jaynarol/php-fpm-alpine:7.1-composer composer update
  else
    printf "\n\n!!! The project has not been installed !!!\n\n"
  fi
}

function exec(){
    run_container
    docker-compose exec container sh
}

function make(){
    run_container
    read -p "php artisan make:" make_text
    docker-compose exec container php artisan make:$make_text
}

function ide_helper_model(){
    run_container
    docker-compose exec container php artisan ide-helper:models
}

function logs(){
    tail -f src/storage/logs/laravel.log
}



function run_container(){
  RUNNING=$(docker-compose ps -q container)
  if [[ $RUNNING ==  "" ]]; then
    docker-compose up -d
  fi
}

function set_project(){

    while [ -z $CONTAINER_NAME ]; do
        read -p "Enter DOCKER container name (ex: nova-api): " CONTAINER_NAME
    done

    while [ -z $SONAR_KEY ]; do
        read -p "Enter SONAR project key (ex: com.jaynarol.php.nova:api): " SONAR_KEY
    done

    while [ -z $SONAR_NAME ]; do
        read -p "Enter SONAR project name (ex: nova-api): " SONAR_NAME
    done

    while [ -z $SONAR_VERSION ]; do
        read -p "Enter SONAR project version (ex: 0.1.160731): " SONAR_VERSION
    done

}

function add_phpunit(){
  cat > src/phpunit.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         bootstrap="bootstrap/autoload.php"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false">
    <testsuites>
        <testsuite name="Application Test Suite">
            <directory suffix="Test.php">./tests</directory>
        </testsuite>
    </testsuites>
    <filter>
        <whitelist processUncoveredFilesFromWhitelist="true">
            <directory suffix=".php">./app</directory>
            <exclude>
                <directory>./app/Console</directory>
                <directory>./app/Events</directory>
                <directory>./app/Jobs</directory>
                <directory>./app/Providers</directory>
                <directory>./app/Exceptions</directory>
                <directory>./app/Http/Request</directory>
                <directory>./app/Http/Middleware</directory>
                <file>./app/Http/Kernel.php</file>
            </exclude>
        </whitelist>
    </filter>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="CACHE_DRIVER" value="array"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="QUEUE_DRIVER" value="sync"/>
        <ini name="memory_limit" value="512M"/>
    </php>
    <logging>
        <log type="coverage-html" target="./storage/phpunit/" charset="UTF-8" yui="true" highlight="false" lowUpperBound="35" highLowerBound="70"/>
        <log type="coverage-clover" target="./storage/phpunit/codeCoverage.xml"/>
        <log type="junit" target="./storage/phpunit/testResult.xml" logIncompleteSkipped="false"/>
        <log type="testdox-html" target="./storage/phpunit/testdox.html"/>
        <log type="metrics-xml" target="./storage/phpunit/metrics.xml"/>
    </logging>
</phpunit>
EOF
}


function add_sonar(){
  cat > src/sonar-project.properties << EOF
sonar.projectKey=$SONAR_KEY
sonar.projectName=$SONAR_NAME
sonar.projectVersion=$SONAR_VERSION

sonar.sources=app
sonar.tests=tests

sonar.language=php
sonar.sourceEncoding=UTF-8

sonar.php.coverage.reportPath=/var/www/html/storage/phpunit/codeCoverage.xml
sonar.php.tests.reportPath=/var/www/html/storage/phpunit/testResult.xml

sonar.exclusions=app/Http/Kernel.php, app/Providers/**, app/Events/**, app/Console/**, app/Jobs/**, app/Exceptions/**, app/Http/Middleware/**
EOF
}


function add_docker_compose(){
  cat > docker-compose.yml << EOF
version: "2"
services:

  nginx:
    image: nginx:1.11-alpine
    ports:
      - 80:80
    links:
      - container:php
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./src:/var/www/html/

  container:
    image: jaynarol/php-fpm-alpine:7.1-xdebug
    volumes:
      - ./src:/var/www/html/
    environment:
      - APP_KEY=[wait_key]
      - APP_DEBUG=true
      - DB_TEST=true
EOF
}

function add_gitignore(){
  cat > .gitignore << EOF
# Intellij
.idea/
*.iml
*.iws

# Mac
.DS_Store

# me
src/.sonar/
src/storage/phpunit/
EOF
}

function add_nginx_conf(){
  cat > nginx.conf << EOF
worker_processes auto;

events {
    worker_connections  1024;
    multi_accept        on;
}


http {

    sendfile				on;
    tcp_nopush				on;
    tcp_nodelay				on;
    keepalive_timeout			30;
    types_hash_max_size			2048;
    server_tokens			off;
    reset_timedout_connection		on;
    fastcgi_read_timeout		300;

    include				mime.types;
    default_type			text/html;
    access_log				off;
    error_log				off;

    upstream php {
	server php:9000;
    }

    server {

        root		  /var/www/html/public/;
	index		  index.php index.html index.htm;
        charset		  utf-8;

        location / {
            try_files \$uri \$uri/ /index.php?\$query_string;
	}

        location ~ \.php$ {

                include fastcgi.conf;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
        }
    }


}
EOF
}

main