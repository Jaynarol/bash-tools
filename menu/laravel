#!/bin/bash

export MY_SONAR_HOST
export MY_SONAR_TOKEN
export MY_DOCKER_HOST

IMAGE_NAME=''
CONTAINER_NAME=''
SONAR_KEY=''
SONAR_NAME=''
SONAR_VERSION=''


function main(){
  clear
  set_container_name
  while : ; do
    printf "\n\n[ q:exit | *:test | c:coverage | s:sonar | i:install | u:update ]\n\n"
    read -n1 -s
    case "$REPLY" in\
	"i") clear; install    ;; 
	"s") clear; sonar      ;; 
	"u") clear; update     ;; 
	"c") clear; coverage   ;; 
	"q") break             ;; 
	 * ) clear; test       ;; 
    esac
  done
}






function test(){
  if [ ! -z $CONTAINER_NAME ]; then
    run_container
    docker exec -it ${CONTAINER_NAME} vendor/bin/phpunit --no-coverage
  else
    printf "\n\n!!! The project has not been installed !!!\n\n"
  fi
}


function coverage(){
  if [ ! -z $CONTAINER_NAME ]; then
    run_container
    docker exec -it ${CONTAINER_NAME} vendor/bin/phpunit
    start src/storage/phpunit/index.html
  else
    printf "\n\n!!! The project has not been installed !!!\n\n"
  fi
}

function sonar(){
  if [ ! -z $CONTAINER_NAME ]; then
    run_container
    docker exec -it ${CONTAINER_NAME} vendor/bin/phpunit
    docker run --rm -v /$(pwd)/src:/root/src -e HOST=${MY_SONAR_HOST} -e TOKEN=${MY_SONAR_TOKEN} jaynarol/sonar-scanner
  else
    printf "\n\n!!! The project has not been installed !!!\n\n"
  fi
}

function install(){
  if [ ! -d src ]; then
    set_project

    add_docker_compose
    add_docker_compose
    add_dockerfile
    add_gitignore
    set_container_name

    docker run --rm -v /$(pwd)/src:/app jaynarol/php-composer:7.0-apache composer create-project --prefer-dist laravel/laravel .
    source src/.env
    rm -rf src/.env*
    sed -i "s@\[wait_key\]@$APP_KEY@" docker-compose.yml
    sed -i "s@\[wait_container\]@$CONTAINER_NAME@" docker-compose.yml
    sed -i "s@\[wait_image\]@$IMAGE_NAME@" docker-compose.yml

    add_phpunit
    add_sonar
  else
    printf "\n\n!!! The project has been installed !!!\n\n"
  fi
}

function update(){
  if [ -d src ]; then
    docker run --rm -v /$(pwd)/src:/app jaynarol/php-composer:7.0-apache composer update
  else
    printf "\n\n!!! The project has not been installed !!!\n\n"
  fi
}






function run_container(){
  RUNNING=$(docker inspect --format="{{ .State.Running }}" ${CONTAINER_NAME} 2> /dev/null)
  if [ $? -eq 1 ] || [ "$RUNNING" == "false" ]; then
    docker-compose up -d
  fi
}

function set_project(){

    while [ -z $IMAGE_NAME ]; do
        read -p "Enter DOCKER image name (ex: $MY_DOCKER_HOST/nova/api): " IMAGE_NAME
    done

    while [ -z $CONTAINER_NAME ]; do
        read -p "Enter DOCKER container name (ex: nova-api): " CONTAINER_NAME
    done

    while [ -z $SONAR_KEY ]; do
        read -p "Enter SONAR project key (ex: com.jaynarol.php.nova:api): " SONAR_KEY
    done

    while [ -z $SONAR_NAME ]; do
        read -p "Enter SONAR project name (ex: nova-api): " SONAR_NAME
    done

    while [ -z $SONAR_VERSION ]; do
        read -p "Enter SONAR project version (ex: 0.1.160731): " SONAR_VERSION
    done

}

function set_container_name(){
  if [ -z $CONTAINER_NAME ] && [ -f docker-compose.yml ]; then
    eval $(parse_yaml docker-compose.yml "config_")
    CONTAINER_NAME=${config_services_container_container_name[0]}
  fi
}

function add_phpunit(){
  cat > src/phpunit.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         bootstrap="bootstrap/autoload.php"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false">
    <testsuites>
        <testsuite name="Application Test Suite">
            <directory suffix="Test.php">./tests</directory>
        </testsuite>
    </testsuites>
    <filter>
        <whitelist processUncoveredFilesFromWhitelist="true">
            <directory suffix=".php">./app</directory>
            <exclude>
                <file>./app/Http/routes.php</file>
            </exclude>
        </whitelist>
    </filter>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="CACHE_DRIVER" value="array"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="QUEUE_DRIVER" value="sync"/>
        <ini name="memory_limit" value="512M"/>
    </php>
    <logging>
        <log type="coverage-html" target="./storage/phpunit/" charset="UTF-8" yui="true" highlight="false" lowUpperBound="35" highLowerBound="70"/>
        <log type="coverage-clover" target="./storage/phpunit/codeCoverage.xml"/>
        <log type="junit" target="./storage/phpunit/testResult.xml" logIncompleteSkipped="false"/>
        <log type="testdox-html" target="./storage/phpunit/testdox.html"/>
        <log type="metrics-xml" target="./storage/phpunit/metrics.xml"/>
    </logging>
</phpunit>
EOF
}


function add_sonar(){
  cat > src/sonar-project.properties << EOF
sonar.projectKey=$SONAR_KEY
sonar.projectName=$SONAR_NAME
sonar.projectVersion=$SONAR_VERSION

sonar.sources=app
sonar.tests=tests

sonar.language=php
sonar.sourceEncoding=UTF-8

sonar.php.coverage.reportPath=./storage/phpunit/codeCoverage.xml
sonar.php.tests.reportPath=./storage/phpunit/testResults.xml

sonar.exclusions=app/Providers/**
EOF
}


function add_docker_compose(){
  cat > docker-compose.yml << EOF
version: "2"
services:

  container:
    build: .
    container_name: [wait_container]
    image: [wait_image]
    ports:
      - 80:80
    volumes:
      - ./src:/app
    environment:
      - TZ=Asia/Bangkok
      - PHP_XDEBUG=1
      - APP_KEY=[wait_key]
      - APP_DEBUG=true
      - DB_CONNECTION=sqlite
EOF
}


function add_dockerfile(){
  cat > Dockerfile << EOF
FROM jaynarol/php-composer:7.0-apache
MAINTAINER Jaynarol <docker@jaynarol.com>

COPY ./src /app

RUN chown -R  www-data:www-data /app \\
    && chmod 644 -R /app \\
    && chmod 775 -R /app/storage /app/bootstrap/cache
EOF
}


function add_gitignore(){
  cat > .gitignore << EOF
# Intellij
.idea/
*.iml
*.iws

# Mac
.DS_Store

# me
src/.sonar/
EOF
}

function parse_yaml() {
    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
              vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
              printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
      }
    }' | sed 's/_=/+=/g'
}

main